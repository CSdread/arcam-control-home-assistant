# Pre-commit hooks configuration for code quality assurance
repos:
  # Ruff - Fast Python linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.8
    hooks:
      - id: ruff
        name: ruff-lint
        description: "Run ruff linter"
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format
        name: ruff-format
        description: "Run ruff formatter"

  # MyPy - Static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: mypy-type-check
        description: "Run mypy static type checking"
        additional_dependencies: [types-requests]
        args: [--strict, --ignore-missing-imports]
        files: ^homeassistant/components/arcam_avr/

  # Bandit - Security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: bandit-security
        description: "Run bandit security checks"
        args: [-r, -f, json, -o, bandit-report.json]
        files: ^homeassistant/components/arcam_avr/
        exclude: ^tests/

  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: trailing-whitespace
        description: "Trim trailing whitespace"
      - id: end-of-file-fixer
        name: end-of-file-fixer
        description: "Ensure files end with newline"
      - id: check-yaml
        name: check-yaml
        description: "Check YAML syntax"
        files: \.(yaml|yml)$
      - id: check-json
        name: check-json
        description: "Check JSON syntax"
        files: \.json$
      - id: check-toml
        name: check-toml
        description: "Check TOML syntax"
        files: \.toml$
      - id: check-xml
        name: check-xml
        description: "Check XML syntax"
        files: \.xml$
      - id: check-merge-conflict
        name: check-merge-conflict
        description: "Check for merge conflict markers"
      - id: check-case-conflict
        name: check-case-conflict
        description: "Check for case conflicts"
      - id: check-symlinks
        name: check-symlinks
        description: "Check for broken symlinks"
      - id: check-added-large-files
        name: check-large-files
        description: "Check for large files"
        args: [--maxkb=1000]
      - id: fix-byte-order-marker
        name: fix-bom
        description: "Fix UTF-8 byte order marker"

  # Python-specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-ast
        name: check-python-ast
        description: "Check Python AST"
        files: \.py$
      - id: check-builtin-literals
        name: check-builtin-literals
        description: "Check for builtin type constructor use"
        files: \.py$
      - id: check-docstring-first
        name: check-docstring-first
        description: "Check docstring is first"
        files: \.py$
      - id: debug-statements
        name: debug-statements
        description: "Check for debugger imports and breakpoints"
        files: \.py$
      - id: name-tests-test
        name: name-tests-test
        description: "Ensure test files are named correctly"
        files: ^tests/.*\.py$

  # Security and dependency checks
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: safety-check
        description: "Check for known security vulnerabilities"
        files: requirements.*\.txt$

  # Documentation checks
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.1
    hooks:
      - id: doc8
        name: doc8-lint
        description: "Check documentation style"
        files: \.md$
        args: [--max-line-length=88]

  # Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: markdownlint
        description: "Lint markdown files"
        args: [--fix]
        files: \.md$

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        name: conventional-commits
        description: "Check commit message format"
        stages: [commit-msg]

  # Local hooks for custom checks
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        description: "Run pytest to ensure tests pass"
        entry: python -m pytest tests/ -x --tb=short
        language: system
        pass_filenames: false
        always_run: false
        files: ^(homeassistant/components/arcam_avr/|tests/).*\.py$
        
      - id: integration-manifest-check
        name: manifest-check
        description: "Validate Home Assistant manifest"
        entry: python -c "import json; json.load(open('homeassistant/components/arcam_avr/manifest.json'))"
        language: system
        files: ^homeassistant/components/arcam_avr/manifest\.json$
        
      - id: translation-check
        name: translation-check
        description: "Validate translation files"
        entry: python -c "import json; [json.load(open(f)) for f in ['homeassistant/components/arcam_avr/translations/en.json', 'homeassistant/components/arcam_avr/translations/es.json', 'homeassistant/components/arcam_avr/translations/fr.json', 'homeassistant/components/arcam_avr/translations/de.json']]"
        language: system
        files: ^homeassistant/components/arcam_avr/translations/.*\.json$

      - id: no-print-statements
        name: no-print-statements
        description: "Check for print statements in code"
        entry: python -c "import sys; sys.exit(1 if any('print(' in line for line in open(f).readlines()) else 0)"
        language: system
        files: ^homeassistant/components/arcam_avr/.*\.py$
        exclude: ^tests/

      - id: import-order-check
        name: import-order-check
        description: "Check import order follows standards"
        entry: python -c "
import ast
import sys
from pathlib import Path

def check_imports(file_path):
    with open(file_path) as f:
        tree = ast.parse(f.read())
    
    imports = []
    for node in ast.walk(tree):
        if isinstance(node, (ast.Import, ast.ImportFrom)):
            imports.append(node)
    
    # Basic check: stdlib before third-party before local
    return True  # Simplified for pre-commit

if __name__ == '__main__':
    for file_path in sys.argv[1:]:
        if not check_imports(file_path):
            sys.exit(1)
"
        language: system
        files: ^homeassistant/components/arcam_avr/.*\.py$

# Global pre-commit configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"