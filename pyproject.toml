[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "arcam-control-home-assistant"
version = "1.0.0"
description = "Home Assistant integration for Arcam AVR receivers"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Arcam AVR Integration Team", email = "noreply@example.com" }
]
keywords = ["home-assistant", "arcam", "avr", "integration", "smart-home"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]
requires-python = ">=3.11"
dependencies = [
    "homeassistant>=2024.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "ruff>=0.1.0",
    "mypy>=1.5",
    "bandit>=1.7",
    "safety>=2.0",
    "pre-commit>=3.0",
    "black>=23.0",
    "isort>=5.12",
    "pylint>=2.17",
    "psutil>=5.9",  # For performance testing
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
]
lint = [
    "ruff>=0.1.0",
    "mypy>=1.5",
    "bandit>=1.7",
    "safety>=2.0",
    "black>=23.0",
    "isort>=5.12",
    "pylint>=2.17",
]

[project.urls]
Homepage = "https://github.com/CSdread/arcam-control-home-assistant"
Repository = "https://github.com/CSdread/arcam-control-home-assistant.git"
Issues = "https://github.com/CSdread/arcam-control-home-assistant/issues"
Documentation = "https://github.com/CSdread/arcam-control-home-assistant/blob/main/docs/"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
show-fixes = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific
]
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any)
    "S101",   # Use of assert (allowed in tests)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
    "COM812", # Trailing comma (handled by formatter)
    "ISC001", # Implicit string concatenation (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",      # No docstring requirements in tests
    "S101",   # Use of assert allowed in tests
    "PLR2004", # Magic values allowed in tests
    "ANN",    # No type annotation requirements in tests
    "ARG",    # Unused arguments allowed in fixtures
]
"homeassistant/components/arcam_avr/arcam/*" = [
    "PLR0913", # Protocol classes may have many arguments
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["homeassistant"]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
platform = "linux"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "hardware: marks tests that require hardware",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["homeassistant/components/arcam_avr"]
omit = [
    "tests/*",
    "homeassistant/components/arcam_avr/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

# Black configuration (for compatibility)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration (for compatibility)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["homeassistant"]

# Pylint configuration
[tool.pylint.main]
py-version = "3.11"
jobs = 0  # Use all available processors
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.mccabe",
]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "duplicate-code",
    "import-error",  # Handled by mypy
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-complexity = 10
max-args = 10
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50